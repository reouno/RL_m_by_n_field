
==================== FINAL INTERFACE ====================
2016-03-06 10:36:01.882104 UTC

interface main@main:Main 7103
  interface hash: fca510b731ce1969d92a5de2793caba6
  ABI hash: 79ec7711acea8cb9cabd45013e3df6f7
  export-list hash: 98723cd8b9a67b912585965d1951d148
  orphan hash: eccc707bc4f01eee5833cc6d5b8eae8a
  flag hash: 134624f203569b645713141da20ca16f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.field
  Main.learned_actions
  Main.main
  Main.print_field
module dependencies:
package dependencies: RL005nbym-0.1.0.0@RL005_9lGNV08hgas9M5W10C6mJ9
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0*
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL*
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  RL005nbym-0.1.0.0@RL005_9lGNV08hgas9M5W10C6mJ9:Lib e24bb5212c772c4f3ea181c1d504cc8f
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO e7c9ddd0b9319c17e6733109efa94847
import  -/  base-4.8.2.0:Text.Printf 0276d4e7547f991f04a90f6b1e7f1f46
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 8b0bee2cbf19008d0429e93c882cbe4e
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL:System.Random 0533f03dd667734fedcae55019ea9151
04b1543b1173c0cd4a84cbb0b8125296
  $s!1 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a -> a
  {- Arity: 2, Strictness: <S(SL),1*U(U(U),U(U))><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   w :: (GHC.Types.Int, GHC.Types.Int)
                   w1 :: Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 Main.$wpoly_go10 @ a ww4 ww2 w1 } }) -}
71a41228d11fd25aca26bf7eccf97c89
  $sfromList ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds1 :: [((GHC.Types.Int, GHC.Types.Int), a)] ->
                 case ds1 of wild {
                   [] -> Data.Map.Base.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a
                   : ds2 ds3
                   -> case ds2 of wild1 { (,) kx x ->
                      case ds3 of wild2 {
                        []
                        -> case kx of dt { (,) ipv ipv1 ->
                           Data.Map.Base.Bin
                             @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                             (Data.Map.Base.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds4 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww4 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild7 {
                                  GHC.Types.False
                                  -> Main.$sfromList1
                                       @ a
                                       (Data.Map.Base.Bin
                                          @ (GHC.Types.Int, GHC.Types.Int)
                                          @ a
                                          1
                                          ww
                                          x
                                          (Data.Map.Base.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                                          (Data.Map.Base.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a))
                                       wild2
                                  GHC.Types.True
                                  -> case ww2 of wild8 { GHC.Types.I# x1 ->
                                     case ww5 of wild9 { GHC.Types.I# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# x1 y) of wild10 {
                                       GHC.Types.False
                                       -> Main.$wpoly_go1
                                            @ a
                                            1
                                            (Data.Map.Base.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1
                                               ww
                                               x
                                               (Data.Map.Base.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Base.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2
                                       GHC.Types.True
                                       -> Main.$sfromList1
                                            @ a
                                            (Data.Map.Base.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1
                                               ww
                                               x
                                               (Data.Map.Base.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Base.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2 } } } }
                             GHC.Types.True
                             -> Main.$wpoly_go1
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     @ a
                                     1
                                     ww
                                     x
                                     (Data.Map.Base.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                                     (Data.Map.Base.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a))
                                  wild2 } } } } } } } } }) -}
0165e47e7c80766be1f89d445b5f69c7
  $sfromList1 ::
    Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> [((GHC.Types.Int, GHC.Types.Int), a1)]
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
2433dba13e503b53837bf9150896464a
  $w$sgo10 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
8ce2fcf82c68be229c38b7c29deb3739
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
0eacb608c0871f8aa606e6baaa41aa8c
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) a
    -> a
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U>, Inline: [0] -}
3af57e2fafa90bf3c3b4ec948ad848df
  field :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.field13
                   Main.field1) -}
f5767fdca4c9ddd56dc5a368e098404c
  field1 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.field13
                   Main.field2) -}
059f120c863c0c84712e761ee7b4def3
  field10 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 100.0) -}
998347eb62680fcd88f01968e258490d
  field11 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0) -}
86caa2c8f9f1a0c5b7161e24a9a197de
  field12 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# -10.0) -}
bd60ce9c2a5d6480216cd96cd3a1ae92
  field13 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   Main.field14) -}
ebbd2cabcb8f50dab1655c7176cb0878
  field14 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   Main.field15) -}
e399cb8b3f92283d27c63a0a4f67e623
  field15 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   Main.field16) -}
8f335fc96f0b62f7182b75894ccdbe3e
  field16 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   Main.field17) -}
8839ad9c6d49d18099f07a10bf0e4747
  field17 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   (GHC.Types.[] @ GHC.Types.Double)) -}
fdb3f280da17dab7255b8fe7b755920c
  field18 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   Main.field19) -}
6858b7d696cbb2110f9aa55a99f65826
  field19 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   Main.field20) -}
2a251f441a577988b7d915e9a80f5f66
  field2 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.field18
                   Main.field3) -}
0a874f74122805f3b967103947b565ea
  field20 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field12
                   Main.field21) -}
0df39413a6de4bac39e3d08f5d047bce
  field21 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field12
                   Main.field17) -}
97be3624060d1670697343e7432e2453
  field3 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.field13
                   Main.field4) -}
2982ce5f92866335d42bf36096f7187a
  field4 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Main.field5
                   (GHC.Types.[] @ [GHC.Types.Double])) -}
df92f3a7cfb7fe6214b809a76dbb9d75
  field5 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   Main.field6) -}
42cf012e1a136319ebc8f4efd7ebcd81
  field6 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   Main.field7) -}
3fed42e028888a68ca15c1167d5692ce
  field7 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field12
                   Main.field8) -}
8f6b2c0e3923f2e86f0de3d64bd29549
  field8 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field11
                   Main.field9) -}
9d0726461b98e52dc2acda45507389bd
  field9 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Main.field10
                   (GHC.Types.[] @ GHC.Types.Double)) -}
68762936402abf344385a4ecf41ff0cb
  learned_actions ::
    Data.Foldable.Foldable t =>
    [t a]
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Base.Map
         (GHC.Types.Int, GHC.Types.Int)
         (Data.Map.Base.Map Lib.Cross GHC.Types.Double)
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.IO [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 6,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,C(U(U)),A,A,A,A,A)><L,U><L,U(U(U),U(U))><L,U><L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.learned_actions1
                  `cast`
                (forall (t :: * -> *) a.
                 <Data.Foldable.Foldable t>_R
                 ->_R <[t a]>_R
                 ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                 ->_R <Data.Map.Base.Map
                         (GHC.Types.Int, GHC.Types.Int)
                         (Data.Map.Base.Map Lib.Cross GHC.Types.Double)>_R
                 ->_R <[(GHC.Types.Int, GHC.Types.Int)]>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <[(GHC.Types.Int, GHC.Types.Int)]>_R)) -}
562b10d56a8b50b77f6ace29688b8a89
  learned_actions1 ::
    Data.Foldable.Foldable t =>
    [t a]
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Base.Map
         (GHC.Types.Int, GHC.Types.Int)
         (Data.Map.Base.Map Lib.Cross GHC.Types.Double)
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [(GHC.Types.Int, GHC.Types.Int)] #)
  {- Arity: 6,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,C(U(U)),A,A,A,A,A)><L,U><L,U(U(U),U(U))><L,U><L,1*U><L,U> -}
ee6590a2ab0ffaa5074d93f2d3fc4c03
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e3bd864fe81295cabb6b36ca45539f6f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U> -}
20688fff09df92565d9be8c5f0313411
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
c922ac24d1890e4afcdca902eb6efc92
  print_field :: [[[GHC.Types.Char]]] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.print_field1
                  `cast`
                (<[[[GHC.Types.Char]]]>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
5d8a5e131702f884607beae010d4676f
  print_field1 ::
    [[[GHC.Types.Char]]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: (\ field22 :: [[[GHC.Types.Char]]]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.List.$wlenAcc
                        @ [[GHC.Types.Char]]
                        field22
                        0 of ww2 { DEFAULT ->
                 letrec {
                   $wa :: GHC.Prim.Int#
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int#
                       w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# ww ww2) of wild {
                       GHC.Types.False -> (# w, GHC.Tuple.() #)
                       GHC.Types.True
                       -> case GHC.IO.Handle.Text.hPutStr2
                                 GHC.IO.Handle.FD.stdout
                                 (case Text.Read.readEither6
                                         @ GHC.Base.String
                                         (Text.ParserCombinators.ReadP.run
                                            @ GHC.Base.String
                                            Main.print_field6
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               Main.print_field5
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  (Main.print_field_go
                                                     (GHC.List.$w!!
                                                        @ [[GHC.Types.Char]]
                                                        field22
                                                        ww))
                                                  Main.print_field4))) of wild1 {
                                    [] -> Main.print_field3
                                    : x ds1
                                    -> case ds1 of wild2 {
                                         [] -> x : ipv ipv1 -> Main.print_field2 } })
                                 GHC.Types.True
                                 w of ds1 { (#,#) ipv ipv1 ->
                          case GHC.IO.Handle.Text.hPutStr2
                                 GHC.IO.Handle.FD.stdout
                                 (GHC.Types.[] @ GHC.Types.Char)
                                 GHC.Types.True
                                 ipv of ds2 { (#,#) ipv2 ipv3 ->
                          $wa (GHC.Prim.+# ww 1) ipv2 } } }
                 } in
                 $wa 0 eta }) -}
7398513e46db9e1a5effeb04c3d6c1c2
  print_field2 :: GHC.Base.String
  {- Strictness: b -}
4ceadb4153275551e682e9de725d317d
  print_field3 :: GHC.Base.String
  {- Strictness: b -}
dd80c6c9a25dcc5fef2bce186a33a12c
  print_field4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\""#) -}
99d34582f3a1f4a2bb21d50b81fed694
  print_field5 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '"') -}
7c1e0affa4b1c5ea19869a3281c78a91
  print_field6 :: Text.ParserCombinators.ReadP.P GHC.Base.String
  {- Unfolding: (GHC.Read.$wa19
                   @ GHC.Base.String
                   (Text.Read.readEither5 @ GHC.Base.String)) -}
2fbb1fb08913959cf2eb5116f7965533
  print_field_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
"SPEC/Main fromList @ (Int, Int) _" [ALWAYS] forall @ a
                                                    $dOrd :: GHC.Classes.Ord
                                                               (GHC.Types.Int, GHC.Types.Int)
  Data.Map.Base.fromList @ (GHC.Types.Int, GHC.Types.Int) @ a $dOrd
  = Main.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

